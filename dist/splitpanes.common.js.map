{"version":3,"sources":["webpack://splitpanes/webpack/bootstrap","webpack://splitpanes/./src/components/splitpanes.vue?f910","webpack://splitpanes/./src/components/splitpanes.vue?8611","webpack://splitpanes/./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js","webpack://splitpanes/src/components/splitpanes.vue","webpack://splitpanes/./src/components/splitpanes.vue?5da2","webpack://splitpanes/./node_modules/vue-loader/lib/runtime/componentNormalizer.js","webpack://splitpanes/./src/components/splitpanes.vue","webpack://splitpanes/./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js"],"names":[],"mappings":"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AAAA;AADA;AATA;AAaA;AACA,OAhCA;AAiCA,KAzFA,CA2FA;;AACA;AACA,cACA,YADA,wBAEA,2CAFA,GAGA,iDAHA,CADA;AAMA;AANA;AASA;AACA;AA9cA,G;;ACDoU,CAAgB,oHAAG,EAAC,C;;;;;ACAxV;;AAEA;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AC5FA;AAC8D;AACL;AACc;;;AAGvE;AAC0F;AAC1F,gBAAgB,kBAAU;AAC1B,EAAE,6CAAM;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEe,gE;;ACnBS;AACA;AACT,yFAAG;AACI","file":"splitpanes.common.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"fb15\");\n","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./splitpanes.vue?vue&type=style&index=0&lang=scss&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./splitpanes.vue?vue&type=style&index=0&lang=scss&\"","// extracted by mini-css-extract-plugin","// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  var i\n  if ((i = window.document.currentScript) && (i = i.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/))) {\n    __webpack_public_path__ = i[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\nexport default null\n","<script>\r\nexport default {\r\n  props: {\r\n    watchSlots: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    horizontal: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    pushOtherPanes: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    dblClickSplitter: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    circularReferencePropertyExclusions: {\r\n      type: Array,\r\n      default: () => []\r\n    }\r\n  },\r\n  data: () => ({\r\n    container: { vnode: null, offsetLeft: null, offsetTop: null },\r\n    slotsCount: 0,\r\n    vnodes: [],\r\n    panes: [],\r\n    splitters: [],\r\n    touch: { mouseDown: false, dragging: false, activeSplitter: null },\r\n    // Detect double click on touch devices.\r\n    splitterTaps: { splitter: null, timeoutId: null },\r\n    slotsCopy: ''\r\n  }),\r\n\r\n  methods: {\r\n    bindEvents () {\r\n      if ('ontouchstart' in window) {\r\n        document.addEventListener('touchmove', this.onMouseMove, { passive: false })\r\n        document.addEventListener('touchend', this.onMouseUp)\r\n      }\r\n\r\n      // Passive: false to prevent scrolling while touch dragging.\r\n      document.addEventListener('mousemove', this.onMouseMove, { passive: false })\r\n      document.addEventListener('mouseup', this.onMouseUp)\r\n    },\r\n\r\n    onMouseDown (e, splitterIndex) {\r\n      this.touch.mouseDown = true\r\n      this.touch.activeSplitter = splitterIndex\r\n    },\r\n\r\n    onMouseMove (e) {\r\n      if (this.touch.mouseDown) {\r\n        // Prevent scrolling while touch dragging (only works with an active event, eg. passive: false).\r\n        e.preventDefault()\r\n\r\n        this.touch.dragging = true\r\n        this.calculatePanesSize(this.getCurrentMouseDrag(e))\r\n        this.$emit('resize', this.panes.map(pane => ({ min: pane.min, max: pane.max, width: pane.width })))\r\n      }\r\n    },\r\n\r\n    onMouseUp () {\r\n      if (this.touch.dragging) {\r\n        this.$emit('resized', this.panes.map(pane => ({ min: pane.min, max: pane.max, width: pane.width })))\r\n      }\r\n\r\n      this.touch.mouseDown = false\r\n      // Keep dragging flag until click event is finished (click happens immediately after mouseup)\r\n      // in order to prevent emitting `splitter-click` event if splitter was dragged.\r\n      setTimeout(() => (this.touch.dragging = false), 100)\r\n    },\r\n\r\n    // If touch device, detect double tap manually (2 taps separated by less than 500ms).\r\n    onSplitterClick (e, splitterIndex) {\r\n      if ('ontouchstart' in window) {\r\n        e.preventDefault()\r\n        // eslint-disable-next-line\r\n        let { timeoutId, splitter } = this.splitterTaps\r\n\r\n        if (splitter !== splitterIndex) {\r\n          splitter = splitterIndex\r\n          timeoutId = setTimeout(() => (splitter = null), 500)\r\n        } else this.onSplitterDblClick(e, splitterIndex)\r\n      }\r\n\r\n      if (!this.touch.dragging) this.$emit('splitter-click', this.panes[splitterIndex])\r\n    },\r\n\r\n    // On splitter dbl click or dbl tap maximize this pane.\r\n    onSplitterDblClick (e, splitterIndex) {\r\n      let totalMinWidths = 0\r\n      this.panes = this.panes.map((pane, i) => {\r\n        pane.width = i === splitterIndex ? pane.max : pane.min\r\n        if (i !== splitterIndex) totalMinWidths += pane.min\r\n\r\n        return pane\r\n      })\r\n      this.panes[splitterIndex].width -= totalMinWidths\r\n      this.$emit('pane-maximize', this.panes[splitterIndex])\r\n    },\r\n\r\n    getCurrentMouseDrag: e => ({\r\n      x: e.touches ? e.touches[0].clientX : e.clientX,\r\n      y: e.touches ? e.touches[0].clientY : e.clientY\r\n    }),\r\n\r\n    // Recursively sum all the offsetTop values from current element up the tree until body.\r\n    // By doing so a padding or margin on a parent won't cause a wrong calculation.\r\n    getContainerOffsetTop (force = false) {\r\n      if (this.container.offsetTop === null || force) {\r\n        let el = this.container.vnode\r\n        let top = el.offsetTop\r\n\r\n        while ((el = el.offsetParent)) {\r\n          top += el.offsetTop\r\n        }\r\n\r\n        this.container.offsetTop = top\r\n      }\r\n\r\n      return this.container.offsetTop\r\n    },\r\n\r\n    // Recursively sum all the offsetTop values from current element up the tree until body.\r\n    getContainerOffsetLeft (force = false) {\r\n      if (this.container.offsetLeft === null || force) {\r\n        let el = this.container.vnode\r\n        let left = el.offsetLeft\r\n\r\n        while ((el = el.offsetParent)) {\r\n          left += el.offsetLeft\r\n        }\r\n\r\n        this.container.offsetLeft = left\r\n      }\r\n\r\n      return this.container.offsetLeft\r\n    },\r\n\r\n    // Returns the drag percentage of the splitter relative to the 2 panes it's inbetween.\r\n    // if the sum of width of the 2 cells  is 60%, the dragPercentage range will be 0 to 100% of this 60%.\r\n    getCurrentDragPercentage (drag) {\r\n      const splitterIndex = this.touch.activeSplitter\r\n      const doc = document.documentElement\r\n      const scrollTop = this.horizontal ? (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0) : null\r\n      const offset = this[`getContainerOffset${this.horizontal ? 'Top' : 'Left'}`]()\r\n      drag = drag[this.horizontal ? 'y' : 'x'] - offset + scrollTop\r\n\r\n      // In the code bellow 'size' refers to 'width' for vertical and 'height' for horizontal layout.\r\n      const containerSize = this.container.vnode[this.horizontal ? 'clientHeight' : 'clientWidth']\r\n      let sumPrevPanesSize = 0\r\n      this.panes.forEach((pane, i) => (sumPrevPanesSize += i < splitterIndex ? pane.width : 0))\r\n\r\n      return drag * 100 / containerSize\r\n    },\r\n\r\n    calculatePanesSize (drag) {\r\n      const splitterIndex = this.touch.activeSplitter\r\n      let sums = {\r\n        prevPanesSize: this.sumPrevPanesSize(splitterIndex),\r\n        nextPanesSize: this.sumNextPanesSize(splitterIndex),\r\n        prevReachedMinPanes: 0,\r\n        nextReachedMinPanes: 0\r\n      }\r\n\r\n      const minDrag = 0 + (this.pushOtherPanes ? 0 : sums.prevPanesSize)\r\n      const maxDrag = 100 - (this.pushOtherPanes ? 0 : sums.nextPanesSize)\r\n      const dragPercentage = Math.max(Math.min(this.getCurrentDragPercentage(drag), maxDrag), minDrag)\r\n\r\n      // If not pushing other panes, panes to resize are right before and right after splitter.\r\n      let panesToResize = [splitterIndex, splitterIndex + 1]\r\n      let paneBefore = this.panes[panesToResize[0]] || null\r\n      let paneAfter = this.panes[panesToResize[1]] || null\r\n\r\n      const paneBeforeMaxReached = paneBefore.max < 100 && (dragPercentage >= (paneBefore.max + sums.prevPanesSize))\r\n      const paneAfterMaxReached = paneAfter.max < 100 && (dragPercentage <= 100 - (paneAfter.max + this.sumNextPanesSize(splitterIndex + 1)))\r\n      // Prevent dragging beyond pane max.\r\n      if (paneBeforeMaxReached || paneAfterMaxReached) {\r\n        if (paneBeforeMaxReached) {\r\n          paneBefore.width = paneBefore.max\r\n          paneAfter.width = Math.max(100 - paneBefore.max - sums.prevPanesSize - sums.nextPanesSize, 0)\r\n        } else {\r\n          paneBefore.width = Math.max(100 - paneAfter.max - sums.prevPanesSize - this.sumNextPanesSize(splitterIndex + 1), 0)\r\n          paneAfter.width = paneAfter.max\r\n        }\r\n\r\n        return\r\n      }\r\n\r\n      // When pushOtherPanes = true, find the closest expanded pane on each side of the splitter.\r\n      if (this.pushOtherPanes) {\r\n        let vars = this.doPushOtherPanes(sums, dragPercentage)\r\n\r\n        if (!vars) return // Prevent other calculation.\r\n        else {\r\n          ({ sums, panesToResize } = vars)\r\n          paneBefore = this.panes[panesToResize[0]] || null\r\n          paneAfter = this.panes[panesToResize[1]] || null\r\n        }\r\n      }\r\n\r\n      if (paneBefore !== null) {\r\n        paneBefore.width = Math.min(Math.max(dragPercentage - sums.prevPanesSize - sums.prevReachedMinPanes, paneBefore.min), paneBefore.max)\r\n      }\r\n\r\n      if (paneAfter !== null) {\r\n        paneAfter.width = Math.min(Math.max(100 - dragPercentage - sums.nextPanesSize - sums.nextReachedMinPanes, paneAfter.min), paneAfter.max)\r\n      }\r\n    },\r\n\r\n    doPushOtherPanes (sums, dragPercentage) {\r\n      const splitterIndex = this.touch.activeSplitter\r\n      let panesToResize = [splitterIndex, splitterIndex + 1]\r\n\r\n      // Pushing Down.\r\n      // Going smaller than the current pane min width: take the previous expanded pane.\r\n      if (dragPercentage < sums.prevPanesSize + this.panes[panesToResize[0]].min) {\r\n        panesToResize[0] = this.findPrevExpandedPane(splitterIndex).index\r\n\r\n        sums.prevReachedMinPanes = 0\r\n        // If pushing a n-2 or less pane, from splitter, then make sure all in between is at min size.\r\n        if (panesToResize[0] < splitterIndex) {\r\n          this.panes.forEach((pane, i) => {\r\n            if (i > panesToResize[0] && i <= splitterIndex) {\r\n              pane.width = pane.min\r\n              sums.prevReachedMinPanes += pane.min\r\n            }\r\n          })\r\n        }\r\n\r\n        sums.prevPanesSize = this.sumPrevPanesSize(panesToResize[0])\r\n\r\n        // If nothing else to push down, cancel dragging.\r\n        if (panesToResize[0] === undefined) {\r\n          sums.prevReachedMinPanes = 0\r\n          this.panes[0].width = this.panes[0].min\r\n          this.panes.forEach((pane, i) => {\r\n            if (i > 0 && i <= splitterIndex) {\r\n              pane.width = pane.min\r\n              sums.prevReachedMinPanes += pane.min\r\n            }\r\n          })\r\n          this.panes[panesToResize[1]].width = 100 - sums.prevReachedMinPanes - this.panes[0].min - sums.prevPanesSize - sums.nextPanesSize\r\n          return null\r\n        }\r\n      }\r\n\r\n      // Pushing Up.\r\n      // Pushing up beyond min width is reached: take the next expanded pane.\r\n      if (dragPercentage > 100 - sums.nextPanesSize - this.panes[panesToResize[1]].min) {\r\n        panesToResize[1] = this.findNextExpandedPane(splitterIndex).index\r\n\r\n        sums.nextReachedMinPanes = 0\r\n        // If pushing a n+2 or more pane, from splitter, then make sure all in between is at min size.\r\n        if (panesToResize[1] > splitterIndex + 1) {\r\n          this.panes.forEach((pane, i) => {\r\n            if (i > splitterIndex && i < panesToResize[1]) {\r\n              pane.width = pane.min\r\n              sums.nextReachedMinPanes += pane.min\r\n            }\r\n          })\r\n        }\r\n\r\n        sums.nextPanesSize = this.sumNextPanesSize(panesToResize[1] - 1)\r\n\r\n        // If nothing else to push up, cancel dragging.\r\n        if (panesToResize[1] === undefined) {\r\n          sums.nextReachedMinPanes = 0\r\n          this.panes[this.panes.length - 1].width = this.panes[this.panes.length - 1].min\r\n          this.panes.forEach((pane, i) => {\r\n            if (i < this.panes.length - 1 && i >= splitterIndex + 1) {\r\n              pane.width = pane.min\r\n              sums.nextReachedMinPanes += pane.min\r\n            }\r\n          })\r\n\r\n          this.panes[panesToResize[0]].width = 100 - sums.prevPanesSize - sums.nextReachedMinPanes - this.panes[this.panes.length - 1].min - sums.nextPanesSize\r\n          return null\r\n        }\r\n      }\r\n\r\n      return { sums, panesToResize }\r\n    },\r\n\r\n    sumPrevPanesSize (splitterIndex) {\r\n      return this.panes.reduce((total, pane, i) => total + (i < splitterIndex ? pane.width : 0), 0)\r\n    },\r\n\r\n    sumNextPanesSize (splitterIndex) {\r\n      return this.panes.reduce((total, pane, i) => total + (i > splitterIndex + 1 ? pane.width : 0), 0)\r\n    },\r\n\r\n    // Return the previous pane from siblings which has a size (width for vert or height for horz) of more than 0.\r\n    findPrevExpandedPane (splitterIndex) {\r\n      let pane = {}\r\n      let arr = [...this.panes]\r\n      arr.reverse().some(p => {\r\n        if (p.index < splitterIndex && p.width > p.min) pane = p\r\n        return p.index < splitterIndex && p.width > p.min\r\n      })\r\n      return pane\r\n    },\r\n\r\n    // Return the next pane from siblings which has a size (width for vert or height for horz) of more than 0.\r\n    findNextExpandedPane (splitterIndex) {\r\n      let pane = {}\r\n      this.panes.some(p => {\r\n        if (p.index > splitterIndex + 1 && p.width > p.min) pane = p\r\n        return p.index > splitterIndex + 1 && p.width > p.min\r\n      })\r\n      return pane\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.container.vnode = this.$refs.container\r\n    this.bindEvents()\r\n    this.$emit('ready')\r\n  },\r\n\r\n  beforeDestroy () {\r\n    document.removeEventListener('touchmove', this.onMouseMove, { passive: false })\r\n    document.removeEventListener('mousemove', this.onMouseMove, { passive: false })\r\n    document.removeEventListener('touchend', this.onMouseUp)\r\n    document.removeEventListener('mouseup', this.onMouseUp)\r\n  },\r\n\r\n  computed: {\r\n    defaultWidth () {\r\n      return 100 / this.vnodes.length\r\n    }\r\n  },\r\n\r\n  beforeUpdate () {\r\n    // Not the first time but all the others, save the current width before re-render and\r\n    // reapply on rendering.\r\n    if (this.panes.length) {\r\n      this.$slots.default.forEach(vnode => {\r\n        // Discard empty text nodes.\r\n        if (!vnode.tag && !(vnode.text || '').trim()) return\r\n\r\n        let { elm: { parentNode: { id, className, style: { width, height } = {} } = {} } = {} } = vnode\r\n\r\n        if (className === 'splitpanes__pane' && (id = id.replace('pane_', '')) && this.panes[id] &&\r\n          (width || height)) {\r\n          // Before saving computed css width or height into `savedWidth` check if `splitpanes-size` has changed.\r\n          // If so save this value instead (means size has changed programmatically).\r\n          const {\r\n            elm: { attributes: { 'splitpanes-size': { value: paneSizeInDOM } = {} } = {} } = {}\r\n          } = vnode\r\n\r\n          if (paneSizeInDOM !== undefined) this.panes[id].savedWidth = parseFloat(paneSizeInDOM)\r\n          else this.panes[id].savedWidth = parseFloat(width || height)\r\n        }\r\n      })\r\n    }\r\n  },\r\n\r\n  render (createEl) {\r\n    const splitPanesChildren = []\r\n\r\n    if (!this.$slots.default) splitPanesChildren.push(createEl('div', 'Splitpanes needs some content here.'))\r\n    else {\r\n      // Since we are adding splitter nodes in DOM, we need to keep track if slots have changed\r\n      // to avoid an infinite loop.\r\n      let slotsHaveChanged = false\r\n\r\n      if (this.watchSlots) {\r\n        const discardProps = ['$options', '$parent', '$root', '$el',\r\n          '$refs', '$slots', '$scopedSlots', '$vnode', '_data', '__vue__',\r\n          '_self', '_vnode', '_watcher', '_watchers', '_computedWatchers', '_renderProxy', 'vnodes',\r\n          'container', 'Ctor', 'context', 'parent', 'componentInstance', 'componentOptions',\r\n          'fnContext', 'fnOptions',\r\n          ...this.circularReferencePropertyExclusions]\r\n\r\n        const slotsExport = JSON.stringify(this.$slots.default, (name, val) => {\r\n          // Discard the properties listed in array to prevent circular reference.\r\n          return discardProps.indexOf(name) > -1 ? undefined : val\r\n        })\r\n\r\n        slotsHaveChanged = this.slotsCopy !== slotsExport\r\n\r\n        if (slotsHaveChanged) this.slotsCopy = slotsExport\r\n      }\r\n\r\n      // Create the panes and splitters arrays each time the slots are updated.\r\n      if (this.slotsCount !== this.$slots.default.length || slotsHaveChanged) {\r\n        this.vnodes = this.$slots.default.filter(vnode => vnode.tag || (vnode.text || '').trim())\r\n        this.vnodes.forEach((vnode, i) => {\r\n          const { data: { attrs = {} } = {} } = vnode\r\n\r\n          // Extract min, max & default size from the panes HTML attributes.\r\n          const {\r\n            'splitpanes-min': min = 0,\r\n            'splitpanes-max': max = 100,\r\n            'splitpanes-size': Default = this.defaultWidth\r\n          } = attrs\r\n\r\n          const savedWidth = this.panes[i] && this.panes[i].savedWidth !== undefined ? this.panes[i].savedWidth : null\r\n\r\n          this.$set(this.panes, i, {\r\n            // ! \\\\ Reapply saved width (if any) after slots have changed.\r\n            width: savedWidth !== null ? savedWidth : parseFloat(Default),\r\n            index: i,\r\n            min: parseFloat(min),\r\n            max: parseFloat(max)\r\n          })\r\n\r\n          if (i) this.$set(this.splitters, i - 1, { id: `splitter-${i - 1}`, index: i - 1 })\r\n        })\r\n\r\n        this.slotsCount = this.$slots.default.length\r\n      }\r\n\r\n      this.vnodes.forEach((vnode, i) => {\r\n        // Splitter.\r\n        if (i) {\r\n          let splitterAttributes = {\r\n            id: i - 1,\r\n            class: 'splitpanes__splitter',\r\n            ref: `splitter-${i - 1}`,\r\n            on: {\r\n              ...('ontouchstart' in window ? { touchstart: e => this.onMouseDown(e, i - 1) } : {}),\r\n              mousedown: e => this.onMouseDown(e, i - 1),\r\n              click: e => this.onSplitterClick(e, i),\r\n              ...(this.dblClickSplitter ? { dblclick: e => this.onSplitterDblClick(e, i) } : {})\r\n            }\r\n          }\r\n          splitPanesChildren.push(createEl('div', splitterAttributes))\r\n        }\r\n\r\n        // Pane.\r\n        let paneAttributes = {\r\n          attrs: {\r\n            id: `pane_${i}`\r\n          },\r\n          class: 'splitpanes__pane',\r\n          style: {\r\n            ...(this.horizontal ? { height: `${this.panes[i].width}%` } : null),\r\n            ...(!this.horizontal ? { width: `${this.panes[i].width}%` } : null)\r\n          },\r\n          on: {\r\n            click: e => this.$emit('pane-click', this.panes[i])\r\n          }\r\n        }\r\n        splitPanesChildren.push(createEl('div', paneAttributes, [vnode]))\r\n      })\r\n    }\r\n\r\n    // Wrapper.\r\n    let wrapperAttributes = {\r\n      class: [\r\n        'splitpanes',\r\n        `splitpanes--${this.horizontal ? 'horizontal' : 'vertical'}`,\r\n        this.touch.dragging ? 'splitpanes--dragging' : ''\r\n      ],\r\n      ref: 'container'\r\n    }\r\n\r\n    return createEl('div', wrapperAttributes, splitPanesChildren)\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.splitpanes {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  &--vertical {flex-direction: row;}\r\n  &--horizontal {flex-direction: column;}\r\n  &--dragging * {user-select: none;}\r\n\r\n  &__pane {\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n    transition: width 0.2s ease-out, height 0.2s ease-out;\r\n\r\n    .splitpanes--dragging & {transition: none;}\r\n  }\r\n\r\n  // Disable default zoom behavior on touch device when double tapping splitter.\r\n  &__splitter {touch-action: none;}\r\n  &--vertical > .splitpanes__splitter {min-width: 1px;cursor: col-resize;}\r\n  &--horizontal > .splitpanes__splitter {min-height: 1px;cursor: row-resize;}\r\n}\r\n\r\n.splitpanes.default-theme {\r\n  .splitpanes__pane {\r\n    background-color: #f2f2f2;\r\n  }\r\n\r\n  .splitpanes__splitter {\r\n    background-color: #fff;\r\n    box-sizing: border-box;\r\n    position: relative;\r\n\r\n    &:before, &:after {\r\n      content: \"\";\r\n      position: absolute;\r\n      top: 50%;\r\n      left: 50%;\r\n      background-color: rgba(0, 0, 0, .15);\r\n      transition: background-color 0.3s;\r\n    }\r\n    &:hover:before, &:hover:after {background-color: rgba(0, 0, 0, .25);}\r\n  }\r\n}\r\n\r\n.default-theme {\r\n  &.splitpanes .splitpanes .splitpanes__splitter {\r\n    z-index: 1;\r\n  }\r\n\r\n  &.splitpanes--vertical > .splitpanes__splitter,\r\n  .splitpanes--vertical > .splitpanes__splitter {\r\n    width: 9px;\r\n    border-left: 1px solid #eee;\r\n    margin-left: -1px;\r\n\r\n    &:before, &:after {\r\n      transform: translateY(-50%);\r\n      width: 1px;\r\n      height: 30px;\r\n    }\r\n    &:before {margin-left: -2px;}\r\n    &:after {margin-left: 1px;}\r\n  }\r\n\r\n  &.splitpanes--horizontal > .splitpanes__splitter,\r\n  .splitpanes--horizontal > .splitpanes__splitter {\r\n    height: 9px;\r\n    border-top: 1px solid #eee;\r\n    margin-top: -1px;\r\n\r\n    &:before,\r\n    &:after {\r\n      transform: translateX(-50%);\r\n      width: 30px;\r\n      height: 1px;\r\n    }\r\n    &:before {margin-top: -2px;}\r\n    &:after {margin-top: 1px;}\r\n  }\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./splitpanes.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./splitpanes.vue?vue&type=script&lang=js&\"","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n","var render, staticRenderFns\nimport script from \"./splitpanes.vue?vue&type=script&lang=js&\"\nexport * from \"./splitpanes.vue?vue&type=script&lang=js&\"\nimport style0 from \"./splitpanes.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import './setPublicPath'\nimport mod from '~entry'\nexport default mod\nexport * from '~entry'\n"],"sourceRoot":""}